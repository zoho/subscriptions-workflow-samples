/*
This is a sample function. Uncomment to execute or make changes to this function.
organizationID = organization.get("organization_id");

Place your {{connection name}} in "YOUR_CONNECTION_NAME" variables.

*/


currentDate = zoho.currentdate.toString("yyyy-MM-dd");
currentTime = currentDate.toTime();

// -- Obtaining the date 7 days earlier.
lastWeekTime = currentTime.addWeek(-1);
lastWeekDate = lastWeekTime.toString("yyyy-MM-dd");
domain = “https://www.zohoapis.com/billing/v1”
linkDomain = "https://billing.zoho.com/app#";
authorizationParams = "&organization_id=" + organization.get("organization_id");
dateParams = "from_date=" + lastWeekDate + "&to_date=" + currentDate;

// -- Fetching Last opportunities report.
url = domain + "/reports/lost_opportunities?response_option=2&" + dateParams + authorizationParams;
request = "Retrieving Lost Opportunities Report";

response = invokeurl
[
	url :url
	type :GET
	connection:"YOUR_CONNECTION_NAME"
];

if(response.get("code") != 0)
{
	errorMessage = response.get("message");
	sendmail
	[
		from :zoho.adminuserid
		to :zoho.adminuserid
		subject :"Error occured in Email Notifications Scheduler while " + request
		message :"<b>Affected url :</b><br>" + url + "<br><b>Error Message</b><br>" + errorMessage
	]
	return;
}
else
{
	lastOpportunitiesCount = response.get("payments").size();
	lastOpportunitiesUrl = linkDomain + "/reports/lost-opportunities?from_date=" + lastWeekDate;
}

// -- Getting Trial Expired Subscriptions List.
url = domain + "/subscriptions?filter_by=SubscriptionStatus.TRIAL_EXPIRED_PREVIOUS_WEEK&response_option=2" + authorizationParams;
request = "Retrieving Trial Expired Subscriptions";

response = invokeurl
[
	url :url
	type :GET
	connection:"subscription_all"
];

if(response.get("code") != 0)
{
	errorMessage = response.get("message");
	sendmail
	[
		from :zoho.adminuserid
		to :zoho.adminuserid
		subject :"Error occured in Email Notifications Scheduler while " + request
		message :"<b>Affected url :</b><br>" + url + "<br><b>Error Message</b><br>" + errorMessage
	]
	return;
}
else
{
	pageContext = response.get("page_context");
	trialExpiredSubscriptionsCount = pageContext.get("total");
	trialExpiredSubscriptionsUrl = linkDomain + "/reports/activecustomers?" + dateParams;
	info trialExpiredSubscriptionsUrl;
}

// -- Getting Churned Subscriptions
url = domain + "/reports/churn?response_option=2&" + dateParams + authorizationParams;

request = "Retrieving Churned Subscriptions";
response = invokeurl
[
	url :url
	type :GET
	connection:"YOUR_CONNECTION_NAME"
];

if(response.get("code") != 0)
{
	errorMessage = response.get("message");
	sendmail
	[
		from :zoho.adminuserid
		to :zoho.adminuserid
		subject :"Error occured in Email Notifications Scheduler while " + request
		message :"<b>Affected url :</b><br>" + url + "<br><b>Error Message</b><br>" + errorMessage
	]
	return;
}
else
{
	pageContext = response.get("page_context");
	churnedSubscriptionsCount = pageContext.get("total");
	churnedSubscriptionsUrl = linkDomain + "/reports/cancellation?" + dateParams;
}

// -- Construct email message.
subjectText = "Weekly Subscription Reports";
messageText = "<b>Last Opportunities Report</b><br>Count : " + lastOpportunitiesCount + "<br> URL : " + lastOpportunitiesUrl + "<br><br><b>Trial Expired Subscriptions Report</b><br>Count : " + trialExpiredSubscriptionsCount + "<br> URL : " + trialExpiredSubscriptionsUrl + "<br><br><b>Churned Subscriptions Report</b><br>Count : " + churnedSubscriptionsCount + "<br> URL : " + churnedSubscriptionsUrl;
sendmail
[
	from :zoho.adminuserid
	to :zoho.adminuserid
	subject :subjectText
	message :messageText
]
