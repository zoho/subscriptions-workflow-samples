
/*
	Entity - Invoice
	
	Triggers - Invoice Created. 
	
	Work flow - When a pending invoice is created, the readings value will be fetched from Zoho Sheet and the
				invoice will be updated accordingly.

	
*/

invoiceStatus = invoice.get("status");
if(!invoiceStatus.equalsIgnoreCase("pending"))
{
	// -- Place the Zoho Sheet ID between the quotes obtained from the URL bar of the browser and also the worksheet name.
	sheetID = "";
	worksheetName = "";
	domain = "https://www.zohoapis.com/billing/v1";
	orgID = organization.get("organization_id");
	invID = invoice.get("invoice_id");
	custID = invoice.get("customer_id");
	customerName = invoice.get("customer_name");
	criteria = Map();
	criteria.put("criteria","\"Customer ID\"=\"" + custID + "\"");
	response = zoho.sheet.getRecords(sheetID,worksheetName,criteria,"YOUR_SHEETS_CONNECTION_NAME");
	if(response.get("status") == "success" && response.get("records_count") > 0)
	{
		record = response.get("records").get("0");
		lastMonthReading = record.get("Last Month Reading");
		currentMonthReading = record.get("Closing Reading");
		totalReading = currentMonthReading - lastMonthReading;
		/* In this example, invoice will be updated if the reading values exceed 100 units.
		   Modify it for your needs.
		*/
		if(totalReading > 100)
		{
			invoiceItems = invoice.get("invoice_items").toJSONList();
			rate = totalReading - 100;
			invoiceItem = Map();
			invoiceItem.put("quantity","1");
			invoiceItem.put("price",rate);
			invoiceItem.put("description","Charges based on metered billing usage.");
			invoiceItems.add(invoiceItem);
			paramsMap = Map();
			paramsMap.put("invoice_items",invoiceItems);
			paramsMap.put("reason","Invoice line items updated based on usage.");
			url = domain + "/invoices/" + invID + "?organization_id=" + orgID;
			request = "Updating Invoice";
			resp = invokeurl
			[
				url :url
				type :PUT
				parameters:paramsMap.tostring()
				connection:"YOUR_BILLING_CONNECTION_NAME"
			];
			if(resp.get("code") == 0)
			{
				data = Map();
				criteria = "\"Customer ID\"=\""+custID+"\"";
				data.put("Status", "Updated");
				response = zoho.sheet.updateRecords(sheetID, worksheetName, criteria, data, Map(), "YOUR_SHEETS_CONNECTION_NAME");
			}
			else
			{
				errorMessage = resp.get("message");
				sendmail
				[
					from :zoho.adminuserid
					to :zoho.adminuserid
					subject :"Error occured in Google sheet integration custom function while " + request
					message :"<b>Affected url :</b><br>" + url + "<br><b>Error Message</b><br>" + errorMessage
				]
			}
		}
	}
	else
	{
		sendmail
		[
			from :zoho.adminuserid
			to :zoho.adminuserid
			subject :"Error occured in Google sheet integration custom function"
			message :"The customer is not found in the Google Sheet."
		]
	}
}
